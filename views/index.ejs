<!DOCTYPE html>
<html lang="cs">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  
  <!-- SEO Meta Tags -->
  <title>UAV Klasifikace | Bc. Jakub Ešpandr</title>
  <meta name="description" content="Interaktivní vizualizace výsledků klasifikace UAV dat pomocí různých klasifikačních metod včetně SVM, KNN, Random Trees a Deep Learning.">
  <meta name="keywords" content="UAV, dron, klasifikace, SVM, KNN, Random Trees, Deep Learning, geoinformatika, dálkový průzkum Země">
  <meta name="author" content="Bc. Jakub Ešpandr">
  <meta name="robots" content="index, follow">
  
  <!-- Open Graph Meta Tags -->
  <meta property="og:title" content="Interaktivní vizualizace výsledků klasifikace UAV dat">
  <meta property="og:description" content="Interaktivní vizualizace výsledků klasifikace UAV dat pomocí různých klasifikačních metod.">
  <meta property="og:type" content="website">
  <meta property="og:url" content="https://uav.flycamczech-imageprocessor.eu">
  <meta property="og:site_name" content="FlyCamCzech">
  <meta property="og:image" content="https://uav.flycamczech-imageprocessor.eu/icons/og-image.png">
  
  <!-- Twitter Card Meta Tags -->
  <meta name="twitter:card" content="summary_large_image">
  <meta name="twitter:title" content="Interaktivní vizualizace výsledků klasifikace UAV dat">
  <meta name="twitter:description" content="Interaktivní vizualizace výsledků klasifikace UAV dat pomocí různých klasifikačních metod.">
  
  <!-- Favicon -->
  <link rel="icon" type="image/x-icon" href="/favicon.ico">
  <link rel="icon" type="image/png" sizes="16x16" href="/icons/favicon-16x16.png">
  <link rel="icon" type="image/png" sizes="32x32" href="/icons/favicon-32x32.png">
  <link rel="apple-touch-icon" sizes="180x180" href="/icons/apple-touch-icon.png">
  <link rel="manifest" href="/icons/site.webmanifest">
  
  <!-- Preload Fonts -->
  <link rel="preload" href="/assets/fonts/fccTYPO-Regular.ttf" as="font" type="font/ttf" crossorigin>
  <link rel="preload" href="/assets/fonts/fccTYPO-Bold.ttf" as="font" type="font/ttf" crossorigin>
  
  <!-- Canonical URL -->
  <link rel="canonical" href="https://uav.flycamczech-imageprocessor.eu">
  
  <!-- Additional Meta Tags -->
  <meta name="theme-color" content="#667eea">
  <meta name="msapplication-TileColor" content="#667eea">
  <meta name="application-name" content="UAV Klasifikace">
  
  <style>
    @font-face {
      font-family: 'FCC Typo';
      src: url('/assets/fonts/fccTYPO-Regular.ttf') format('truetype');
      font-weight: normal;
      font-style: normal;
    }
    
    @font-face {
      font-family: 'FCC Typo';
      src: url('/assets/fonts/fccTYPO-Bold.ttf') format('truetype');
      font-weight: bold;
      font-style: normal;
    }
    
    * {
      box-sizing: border-box;
    }
    
    body {
      font-family: 'FCC Typo', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      background: linear-gradient(180deg, #3a7bd5 0%, #00d2ff 40%, #43e97b 80%, #134e3a 100%);
      min-height: 100vh;
      padding: 2rem;
      margin: 0;
      color: #333;
      line-height: 1.6;
    }
    
    h1 {
      text-align: center;
      font-size: 2.5rem;
      font-weight: bold;
      color: white;
      margin-bottom: 3rem;
      text-shadow: 0 2px 4px rgba(0,0,0,0.3);
      letter-spacing: -0.5px;
    }
    
    h2 {
      font-size: 2.4rem;
      font-weight: bold;
      color: #2d3748;
      margin: -0.5rem 0 1rem 0;
      position: relative;
    }
    
    h2::after {
      content: '';
      position: absolute;
      bottom: -8px;
      left: 0;
      width: 60px;
      height: 4px;
      background: linear-gradient(90deg, #667eea, #764ba2);
      border-radius: 2px;
    }
    
    h3 {
      font-size: 1.4rem;
      font-weight: bold;
      color: #4a5568;
      margin-bottom: 1rem;
    }
    
    h4 {
      font-size: 1.2rem;
      font-weight: bold;
      color: #2d3748;
      margin-bottom: 0.8rem;
    }
    
    .study {
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(10px);
      padding: 1.5rem 2rem 2rem 2rem;
      margin-bottom: 3rem;
      border-radius: 20px;
      box-shadow: 0 20px 40px rgba(0,0,0,0.1);
      border: 1px solid rgba(255,255,255,0.2);
      transition: all 0.3s ease;
      will-change: transform;
    }
    
    .study:hover {
      transform: translate3d(0, -5px, 0);
      box-shadow: 0 25px 50px rgba(0,0,0,0.15);
    }
    
    .study img {
      max-width: 100%;
      margin: 0.5rem 0;
      border-radius: 12px;
      cursor: pointer;
      transition: all 0.3s ease;
      box-shadow: 0 4px 12px rgba(0,0,0,0.1);
      loading: lazy;
      will-change: transform;
    }
    
    .study img:hover {
      transform: scale3d(1.02, 1.02, 1);
      box-shadow: 0 8px 20px rgba(0,0,0,0.15);
    }
    
    .methods {
      display: flex;
      flex-wrap: wrap;
      gap: 1.5rem;
      margin-top: 1.5rem;
      justify-content: center;
      align-items: stretch;
      padding-bottom: 1rem;
    }
    
    .method {
      flex: 1 1 250px;
      min-width: 250px;
      max-width: 350px;
      background: linear-gradient(135deg, #f7fafc 0%, #edf2f7 100%);
      padding: 1.5rem;
      border-radius: 16px;
      border: 1px solid rgba(255,255,255,0.3);
      box-shadow: 0 8px 25px rgba(0,0,0,0.08);
      transition: all 0.3s ease;
      position: relative;
      overflow: hidden;
      display: flex;
      flex-direction: column;
      align-items: center;
      margin-bottom: 1.5rem;
    }
    
    .method::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 4px;
      background: linear-gradient(90deg, #667eea, #764ba2);
    }
    
    .method:hover {
      transform: translateY(-3px);
      box-shadow: 0 12px 30px rgba(0,0,0,0.12);
    }
    
    .method img {
      max-width: 100%;
      margin-bottom: 0.8rem;
      border-radius: 8px;
      transition: all 0.3s ease;
      cursor: pointer;
      loading: lazy;
      position: relative;
    }
    
    .method img:hover {
      transform: scale(1.05);
      box-shadow: 0 6px 15px rgba(0,0,0,0.1);
    }
    
    .comparison-indicator {
      position: absolute;
      top: 5px;
      right: 5px;
      background: rgba(102, 126, 234, 0.9);
      color: white;
      padding: 3px 8px;
      border-radius: 6px;
      font-size: 0.7rem;
      font-weight: bold;
      pointer-events: none;
      z-index: 10;
      backdrop-filter: blur(5px);
    }
    
    button {
      margin-top: 1.5rem;
      padding: 1rem 2.5rem;
      background: linear-gradient(90deg, #3a7bd5 0%, #00d2ff 60%, #43e97b 100%);
      color: white;
      border: none;
      border-radius: 12px;
      cursor: pointer;
      font-size: 1.1rem;
      font-weight: bold;
      transition: all 0.3s ease;
      display: block;
      margin-left: auto;
      margin-right: auto;
      box-shadow: 0 8px 20px rgba(102, 126, 234, 0.3);
      position: relative;
      overflow: hidden;
    }
    
    button::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
      transition: left 0.5s;
    }
    
    button:hover {
      transform: translateY(-2px);
      box-shadow: 0 12px 25px rgba(102, 126, 234, 0.4);
    }
    
    button:hover::before {
      left: 100%;
    }
    
    .overlay, .image-overlay {
      display: none;
      position: fixed;
      z-index: 9999;
      top: 0; left: 0;
      width: 100%; height: 100%;
      background: rgba(0,0,0,0.9);
      backdrop-filter: blur(5px);
    }
    .overlay iframe {
      position: absolute;
      top: 5%; left: 5%;
      width: 90%; height: 90%;
      border: none;
      background: white;
      border-radius: 8px;
    }
    .overlay-close, .image-overlay-close {
      position: absolute;
      top: 20px;
      right: 20px;
      font-size: 2rem;
      color: white;
      cursor: pointer;
      background: rgba(0,0,0,0.5);
      backdrop-filter: blur(10px);
      width: 50px;
      height: 50px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: all 0.3s ease;
      border: 1px solid rgba(255,255,255,0.1);
      z-index: 10002;
    }
    .overlay-close:hover, .image-overlay-close:hover {
      background: rgba(0,0,0,0.7);
      transform: scale(1.1);
    }
    .image-overlay-content {
      position: absolute;
      top: 50%; left: 50%;
      transform: translate(-50%, -50%);
      max-width: 98%;
      max-height: 85%;
    }
    .image-overlay-content img {
      max-width: 100%;
      max-height: 100%;
      width: auto;
      height: auto;
      object-fit: contain;
    }
    .nav-arrow {
      position: absolute;
      top: 50%;
      transform: translateY(-50%);
      font-size: 3rem;
      color: white;
      cursor: pointer;
      user-select: none;
      background: rgba(0,0,0,0.5);
      padding: 10px;
      border-radius: 50%;
      transition: background 0.3s;
      width: 60px;
      height: 60px;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    .nav-arrow:hover {
      background: rgba(0,0,0,0.8);
    }
    .nav-left { left: 10px; }
    .nav-right { right: 10px; }
    .nav-up, .nav-down {
      left: 50%;
      transform: translateX(-50%);
    }
    .nav-up { top: 10px; }
    .nav-down { bottom: 10px; }
    .method-indicator {
      display: none;
    }
    .nav-label {
      position: absolute;
      font-size: 0.8rem;
      color: white;
      background: rgba(0,0,0,0.7);
      padding: 5px;
      border-radius: 3px;
      white-space: nowrap;
    }
    .nav-left .nav-label { right: 100%; margin-right: 10px; }
    .nav-right .nav-label { left: 100%; margin-left: 10px; }
    .nav-up .nav-label { bottom: 100%; margin-bottom: 10px; }
    .nav-down .nav-label { top: 100%; margin-top: 10px; }
    .nav-buttons {
      position: absolute;
      bottom: 20px;
      left: 50%;
      transform: translateX(-50%);
      display: flex;
      gap: 20px;
      z-index: 10000;
    }
    .nav-button {
      background: rgba(255,255,255,0.1);
      backdrop-filter: blur(10px);
      color: #ff4444;
      border: 1px solid rgba(255,255,255,0.2);
      border-radius: 50%;
      width: 60px;
      height: 60px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 1.5rem;
      cursor: pointer;
      transition: all 0.3s ease;
      user-select: none;
      box-shadow: 0 8px 20px rgba(0,0,0,0.2);
    }
    .nav-button:hover {
      background: rgba(255,255,255,0.2);
      transform: scale(1.1);
      box-shadow: 0 12px 25px rgba(0,0,0,0.3);
    }
    .nav-button-label {
      position: absolute;
      bottom: 100%;
      left: 50%;
      transform: translateX(-50%);
      background: rgba(0,0,0,0.8);
      backdrop-filter: blur(10px);
      color: white;
      padding: 8px 12px;
      border-radius: 6px;
      font-size: 0.8rem;
      white-space: nowrap;
      opacity: 0;
      transition: opacity 0.3s ease;
      pointer-events: none;
      border: 1px solid rgba(255,255,255,0.1);
    }
    .nav-button:hover .nav-button-label {
      opacity: 1;
    }
    .overview-container {
      position: relative;
      width: 100%;
      max-width: 800px;
      margin: 0 auto;
      cursor: pointer;
      border-radius: 16px;
      overflow: hidden;
      box-shadow: 0 12px 30px rgba(0,0,0,0.15);
    }
    .overview-image {
      width: 100%;
      height: auto;
      border-radius: 16px;
      transition: all 0.3s ease;
    }
    .overview-image.hidden {
      opacity: 0;
      position: absolute;
      top: 0;
      left: 0;
    }
    .overview-image.visible {
      opacity: 1;
    }
    .overview-container:hover .overview-image.visible {
      opacity: 1;
    }
    .overview-container:hover .overview-image.hidden {
      opacity: 0;
    }
    
    /* Responsive design for mobile devices */
    @media (max-width: 1024px) {
      .methods {
        gap: 1rem;
      }
      .method {
        min-width: 180px;
        max-width: 100%;
        padding: 1rem;
      }
    }
    @media (max-width: 768px) {
      .methods {
        flex-direction: column;
        flex-wrap: wrap;
        gap: 1rem;
        align-items: stretch;
      }
      .method {
        flex: none;
        width: 100%;
        min-width: auto;
        max-width: 100%;
        margin-bottom: 1rem;
      }
    }
    
    @media (max-width: 480px) {
      body {
        padding: 0.5rem;
      }
      
      .nav-buttons {
        gap: 5px;
      }
      
      .nav-button {
        width: 45px;
        height: 45px;
        font-size: 1rem;
      }
      
      .method-indicator {
        font-size: 0.9rem;
        padding: 6px 12px;
      }
      
      h2 {
        font-size: 1.3rem;
      }
    }
    
    .study-nav {
      display: flex;
      justify-content: center;
      gap: 1rem;
      margin-bottom: 2rem;
      flex-wrap: wrap;
    }
    
    .study-nav a {
      background: rgba(255,255,255,0.1);
      backdrop-filter: blur(10px);
      color: white;
      text-decoration: none;
      padding: 0.8rem 1.5rem;
      border-radius: 12px;
      border: 1px solid rgba(255,255,255,0.2);
      transition: all 0.3s ease;
      font-weight: 500;
    }
    
    .study-nav a:hover {
      background: rgba(255,255,255,0.2);
      transform: translateY(-2px);
    }
    
    .study-nav a.active {
      background: rgba(255,255,255,0.3);
      border-color: rgba(255,255,255,0.4);
    }
    
    .study-nav a.home {
      background: linear-gradient(90deg, #5fa8d3 0%, #64d088 100%);
    }
    
    .tables-container {
      display: flex;
      flex-direction: column;
      gap: 1rem;
      margin-top: 1rem;
    }
    
    .table-item {
      background: linear-gradient(135deg, #f7fafc 0%, #edf2f7 100%);
      padding: 1rem;
      border-radius: 16px;
      border: 1px solid rgba(255,255,255,0.3);
      box-shadow: 0 8px 25px rgba(0,0,0,0.08);
      transition: all 0.3s ease;
      position: relative;
      overflow: hidden;
    }
    
    .table-item::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 4px;
      background: linear-gradient(90deg, #667eea, #764ba2);
    }
    
    .table-item:hover {
      transform: translateY(-3px);
      box-shadow: 0 12px 30px rgba(0,0,0,0.12);
    }
    
    .table-item img {
      max-width: 100%;
      border-radius: 8px;
      transition: all 0.3s ease;
      cursor: pointer;
    }
    
    .table-item img:hover {
      transform: scale(1.02);
      box-shadow: 0 6px 15px rgba(0,0,0,0.1);
    }
    
    .tables-overlay-content {
      position: absolute;
      top: 0; left: 0;
      width: 100%; height: 100%;
      overflow-y: auto;
      background: rgba(255,255,255,0.95);
      backdrop-filter: blur(10px);
      border-radius: 0;
      padding: 2rem;
      box-shadow: none;
    }
    
    .tables-overlay-content .tables-container {
      gap: 2rem;
      margin-top: 0;
      max-width: 1200px;
      margin: 0 auto;
    }
    
    .tables-overlay-content .table-item {
      background: white;
      padding: 1.5rem;
      border-radius: 12px;
      box-shadow: 0 8px 20px rgba(0,0,0,0.1);
    }
    
    @media (max-width: 768px) {
      .tables-overlay-content {
        padding: 1rem;
      }
      
      .tables-overlay-content .tables-container {
        gap: 1rem;
        max-width: 100%;
      }
      
      .tables-overlay-content .table-item {
        padding: 1rem;
      }
    }
    
    #tablesOverlay .nav-buttons {
      display: none;
    }
    
    /* Základní styly pro bubliny */
    .bubble {
      position: fixed;
      top: 20px;
      z-index: 1000;
      background: rgba(255,255,255,0.95);
      backdrop-filter: blur(10px);
      border-radius: 50%;
      width: 60px;
      height: 60px;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      transition: all 0.3s ease;
      border: 2px solid rgba(102, 126, 234, 0.3);
      box-shadow: 0 8px 20px rgba(0,0,0,0.1);
    }
    
    .bubble:hover {
      transform: scale(1.1);
      border-color: rgba(102, 126, 234, 0.6);
      box-shadow: 0 12px 25px rgba(0,0,0,0.15);
    }
    
    .bubble-icon {
      font-size: 2rem;
    }
    
    .bubble-content {
      position: absolute;
      top: 100%;
      width: 350px;
      background: rgba(255,255,255,0.98);
      backdrop-filter: blur(15px);
      border-radius: 16px;
      padding: 1.5rem;
      box-shadow: 0 20px 40px rgba(0,0,0,0.15);
      border: 1px solid rgba(255,255,255,0.2);
      opacity: 0;
      visibility: hidden;
      transform: translateY(-10px);
      transition: all 0.3s ease;
      z-index: 1001;
    }
    
    .bubble:hover .bubble-content {
      opacity: 1;
      visibility: visible;
      transform: translateY(0);
    }
    
    .bubble-content h4 {
      margin: 0 0 1rem 0;
      font-size: 1.1rem;
      font-weight: bold;
    }
    
    .bubble-content ul {
      margin: 0;
      padding: 0;
      list-style: none;
    }
    
    .bubble-content li {
      margin-bottom: 0.5rem;
      font-size: 0.9rem;
      line-height: 1.4;
      color: #4a5568;
    }
    
    .bubble-content strong {
      color: #667eea;
      font-weight: bold;
    }
    
    /* Specifické styly pro info bublinu */
    .info-bubble {
      right: 20px;
    }
    
    .info-icon {
      color: #667eea;
    }
    
    .info-content {
      left: auto;
      right: 0;
      width: 50vw;
      max-width: 95vw;
      min-width: unset;
      box-sizing: border-box;
      transform: translateX(0);
    }
    
    .info-content h4 {
      color: #2d3748;
    }
    
    /* Specifické styly pro help bublinu */
    .help-bubble {
      left: 20px;
    }
    
    .help-icon {
      color: #3b82f6;
    }
    
    .help-content {
      left: 0;
      width: 40vw;
      max-width: 95vw;
      min-width: unset;
      box-sizing: border-box;
      transform: translateX(0);
    }
    
    .help-content h4 {
      color: #764ba2;
    }
    
    .help-content ul {
      padding: 0 0 0 1.2em;
      list-style: disc;
    }
    
    .help-content li {
      font-size: 0.95rem;
    }
    
    /* Mobilní styly */
    @media (max-width: 768px) {
      .bubble {
        top: 10px;
        width: 44px;
        height: 44px;
        z-index: 10000;
      }
      .help-bubble { left: 10px; }
      .info-bubble { right: 10px; }

      .bubble-icon {
        font-size: 1.1rem;
        line-height: 1;
      }

      .bubble-content {
        width: 180px;
        padding: 0.7rem;
        z-index: 10001;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        font-size: 0.8rem;
        left: 0;
        right: 0;
      }
      .bubble-content h4 {
        font-size: 0.9rem;
        margin-bottom: 0.5rem;
      }
      .bubble-content li {
        font-size: 0.7rem;
        margin-bottom: 0.3rem;
      }
      
      /* Na mobilu zrušit hover efekty */
      .bubble:hover .bubble-content {
        opacity: 0;
        visibility: hidden;
        pointer-events: none;
      }
      
      /* Třída pro zobrazení na mobilu */
      .bubble-content.mobile-visible {
        opacity: 1 !important;
        visibility: visible !important;
        transform: translateY(0) !important;
        pointer-events: auto !important;
      }
      
      /* Na mobilu nastavit výchozí display na none */
      .bubble-content {
        display: none;
      }
      
      /* Mobilní overlay - obrázek přes celou šířku */
      .image-overlay-content {
        max-width: 100%;
        max-height: 100%;
        padding: 0;
        width: 100%;
        height: 100%;
      }
      .image-overlay-content img {
        width: 100%;
        height: 100%;
        object-fit: contain;
        max-width: 100vw;
        max-height: 100vh;
      }
      /* Skrýt padding na mobilu */
      .image-overlay {
        padding: 0;
      }
      
      /* Specifické pozicování pro info-content na mobilu */
      .info-content {
        left: auto;
        right: 0;
        width: 40vw;
        max-width: 95vw;
        min-width: unset;
        box-sizing: border-box;
        transform: translateX(0);
      }
    }
  </style>
</head>
<body>
  <h1>Interaktivní vizualizace výsledků klasifikace UAV dat</h1>
  
  <div class="info-bubble bubble" title="Klikněte pro více informací">
    <span class="info-icon bubble-icon">ℹ️</span>
    <div class="info-content bubble-content">
      <h4>Klasifikační metody:</h4>
      <ul>
        <li><strong>SVM</strong> - Support Vector Machine</li>
        <li><strong>KNN</strong> - K-Nearest Neighbor</li>
        <li><strong>ML</strong> - Maximum Likelihood</li>
        <li><strong>RT</strong> - Random Trees</li>
        <li><strong>ISO</strong> - ISO-Cluster</li>
        <li><strong>DL</strong> - Deep Learning</li>
      </ul>
    </div>
  </div>
  
  <div class="help-bubble bubble" title="Nápověda k ovládání">
    <span class="help-icon bubble-icon">❓</span>
    <div class="help-content bubble-content">
      <h4>Jak ovládat aplikaci:</h4>
      <ul>
        <li><strong>Klikněte na obrázek území</strong> pro přepínání mezi nasnímanou lokalitou, vybraným zájmovým územím a parametry území.</li>
        <li><strong>Klikněte na obrázek metody</strong> pro zobrazení v detailu a porovnání s výřezem.</li>
        <li><strong>Šipky v overlay</strong> slouží k navigaci mezi metodami a obrázky.</li>
        <li><strong>Tlačítko "Zobrazit grafy"</strong> zobrazí metriky a grafy klasifikace.</li>
      </ul>
      <div style="font-size:0.9em;color:#888;margin-top:0.5em;">Tip: Pro nejlepší zážitek používejte moderní prohlížeč a rychlé připojení.</div>
    </div>
  </div>
  
  <div class="study-nav">
    <a href="/" class="home">🏠 Všechny studie</a>
    <% (typeof allCaseStudies !== 'undefined' ? allCaseStudies : caseStudies).forEach((cs, index) => { %>
      <a href="/study/<%= index + 1 %>">
        📊 Studie <%= index + 1 %>
      </a>
    <% }) %>
  </div>
  
  <% caseStudies.forEach(cs => { %>
    <div class="study">
      <h2><%= cs.title %></h2>
      <div class="overview-container" onclick="toggleOverviewImages('<%= cs.name %>')">
        <% cs.overview.forEach((img, idx) => { %>
          <img src="/data/<%= cs.name %>/<%= img %>" alt="" class="overview-image <%= idx === 0 ? 'visible' : 'hidden' %>" data-study="<%= cs.name %>" data-index="<%= idx %>" />
        <% }) %>
      </div>
      <% if (cs.methods.length > 0) { %>
        <h3>🧪 Klasifikační metody:</h3>
        <div class="methods">
          <% cs.methods.forEach((method, mi) => { %>
            <div class="method">
              <% if (method.images.length > 0) { %>
                <div style="position: relative; display: inline-block; width: 100%;">
                  <picture>
                    <source srcset="/<%= method.images[0].fullPath.replace(/\.(jpg|jpeg|png|webp)$/i, '_thumb.webp') %>" type="image/webp">
                    <img src="/<%= method.images[0].fullPath.replace(/^data\//, 'data/').replace(/\.(jpg|jpeg|png|webp)$/i, '_thumb.webp') %>" alt="" data-study="<%= cs.name %>" data-method="<%= mi %>" data-image="0" onclick="showImageOverlay(this.dataset.study, parseInt(this.dataset.method), 0)" loading="lazy" />
                  </picture>
                  <div class="comparison-indicator">Porovnat</div>
                </div>
              <% } %>
            </div>
          <% }) %>
        </div>
      <% } %>
      <% if (cs.tables && cs.tables.length > 0) { %>
        <button onclick="showTablesOverlay('<%= cs.name %>')">📊 Zobrazit grafy</button>
      <% } %>
    </div>
  <% }) %>

  <div id="overlay" class="overlay">
    <span class="overlay-close" onclick="hideOverlay()">&#10006;</span>
    <iframe id="overlayFrame" src=""></iframe>
  </div>

  <div id="imageOverlay" class="image-overlay">
    <span class="image-overlay-close" onclick="hideImageOverlay()">&#10006;</span>
    <div class="method-indicator" id="methodIndicator"></div>
    <div class="image-overlay-content">
      <img id="overlayImg" src="" alt="" />
    </div>
    
    <div class="nav-buttons">
      <div class="nav-button" onclick="navigateImage(-1)">
        <span class="nav-button-label">Předchozí index</span>
        &#9664;
      </div>
      <div class="nav-button" onclick="navigateImage(1)">
        <span class="nav-button-label">Další index</span>
        &#9654;
      </div>
      <div class="nav-button" onclick="navigateMethod(-1)">
        <span class="nav-button-label">Předchozí metoda</span>
        &#9650;
      </div>
      <div class="nav-button" onclick="navigateMethod(1)">
        <span class="nav-button-label">Další metoda</span>
        &#9660;
      </div>
      <div class="nav-button" id="comparisonToggle" onclick="toggleComparisonMode()" style="display: none;">
        <span class="nav-button-label">Přepnout porovnání</span>
        🔄
      </div>
    </div>
  </div>

  <div id="tablesOverlay" class="image-overlay">
    <span class="image-overlay-close" onclick="hideTablesOverlay()">&#10006;</span>
    <div class="method-indicator" id="tablesIndicator">Grafy a metriky</div>
    <div class="tables-overlay-content">
      <div class="tables-container">
        <!-- Tabulky se načtou dynamicky -->
      </div>
    </div>
    
    <div class="nav-buttons">
      <div class="nav-button" onclick="navigateTable(-1)">
        <span class="nav-button-label">Předchozí graf</span>
        &#10094;
      </div>
      <div class="nav-button" onclick="navigateTable(1)">
        <span class="nav-button-label">Další graf</span>
        &#10095;
      </div>
    </div>
  </div>

  <div id="caseStudiesData" style="display: none;"><%= JSON.stringify(typeof allCaseStudies !== 'undefined' ? allCaseStudies : caseStudies) %></div>

  <script>
    // Memory optimization variables
    let imageCache = new Map();
    let currentOverlayImages = [];
    
    // Clean up memory when overlays are closed
    function cleanupMemory() {
      // Clear image cache if it gets too large
      if (imageCache.size > 50) {
        imageCache.clear();
      }
      
      // Clear current overlay images
      currentOverlayImages = [];
      
      // Force garbage collection hint
      if (window.gc) {
        window.gc();
      }
    }
    
    // Optimized image loading with caching
    function loadImageOptimized(src) {
      if (imageCache.has(src)) {
        return imageCache.get(src);
      }
      
      const img = new Image();
      img.src = src;
      imageCache.set(src, img);
      return img;
    }
    
    function showOverlay(url) {
      document.getElementById('overlayFrame').src = url;
      document.getElementById('overlay').style.display = 'block';
    }
    
    function hideOverlay() {
      document.getElementById('overlayFrame').src = '';
      document.getElementById('overlay').style.display = 'none';
      cleanupMemory();
    }

    const data = JSON.parse(document.getElementById('caseStudiesData').textContent);
    let currentStudy = null;
    let currentMethodIndex = 0;
    let currentImageIndex = 0;
    let isOverviewMode = false;
    let isTableMode = false;
    let currentTableIndex = 0;
    let isComparisonMode = false;
    let originalMethodData = null;

    function showTableOverlay(studyName, type, tableIndex) {
      currentStudy = data.find(st => st.name === studyName);
      currentMethodIndex = 0;
      currentImageIndex = tableIndex;
      isOverviewMode = false;
      isTableMode = true;
      updateImageOverlay();
      document.getElementById('imageOverlay').style.display = 'block';
    }

    function toggleComparisonMode() {
      if (isComparisonMode) {
        // Switch back to normal method view
        if (originalMethodData) {
          currentMethodIndex = originalMethodData.methodIdx;
          currentImageIndex = originalMethodData.imageIdx;
          isComparisonMode = false;
          originalMethodData = null;
          updateImageOverlay();
        }
      } else {
        // Switch to comparison mode
        if (currentStudy && currentStudy.methods && currentStudy.overview) {
          isComparisonMode = true;
          originalMethodData = {
            methodIdx: currentMethodIndex,
            imageIdx: currentImageIndex
          };
          
          // Switch to vysec.jpg for comparison
          const vysecImage = currentStudy.overview.find(img => img.includes('vysec'));
          if (vysecImage) {
            const overlayImg = document.getElementById('overlayImg');
            overlayImg.src = `data/${currentStudy.name}/${vysecImage}`;
            
            const methodIndicator = document.getElementById('methodIndicator');
            const method = currentStudy.methods[currentMethodIndex];
            methodIndicator.textContent = `${method.name} - Porovnání s výřezem`;
          }
        }
      }
    }

    function showImageOverlay(studyName, methodIdx, imageIdx) {
      currentStudy = data.find(st => st.name === studyName);
      
      // Always start in normal mode
      currentMethodIndex = methodIdx;
      currentImageIndex = imageIdx;
      isOverviewMode = false;
      isTableMode = false;
      isComparisonMode = false;
      originalMethodData = null;
      
      updateImageOverlay();
      document.getElementById('imageOverlay').style.display = 'block';
      
      // Show comparison toggle button if vysec.jpg exists
      const vysecImage = currentStudy.overview.find(img => img.includes('vysec'));
      const comparisonToggle = document.getElementById('comparisonToggle');
      if (vysecImage) {
        comparisonToggle.style.display = 'flex';
      } else {
        comparisonToggle.style.display = 'none';
      }
      
      // Skrýt bubliny na mobilu
      if (window.innerWidth <= 768) {
        hideBubbles();
      }
    }

    function toggleOverviewImages(studyName) {
      const study = data.find(st => st.name === studyName);
      const container = event.currentTarget;
      const images = container.querySelectorAll('.overview-image');
      const currentVisible = container.querySelector('.overview-image.visible');
      const currentIndex = Array.from(images).indexOf(currentVisible);
      const nextIndex = (currentIndex + 1) % images.length;
      
      currentVisible.classList.remove('visible');
      currentVisible.classList.add('hidden');
      images[nextIndex].classList.remove('hidden');
      images[nextIndex].classList.add('visible');
    }

    function hideImageOverlay() {
      document.getElementById('imageOverlay').style.display = 'none';
      // Reset comparison mode
      isComparisonMode = false;
      originalMethodData = null;
      // Hide comparison toggle button
      document.getElementById('comparisonToggle').style.display = 'none';
      cleanupMemory();
      
      // Zobrazit bubliny na mobilu
      if (window.innerWidth <= 768) {
        showBubbles();
      }
    }

    function updateImageOverlay() {
      const overlayImg = document.getElementById('overlayImg');
      
      if (isOverviewMode) {
        const image = currentStudy.overview[currentImageIndex];
        const src = `data/${currentStudy.name}/${image}`;
        overlayImg.src = src;
        
        const methodIndicator = document.getElementById('methodIndicator');
        methodIndicator.textContent = image.replace('.webp', '');
      } else if (isTableMode) {
        const table = currentStudy.tables[currentImageIndex];
        const src = '/' + table.fullPath;
        overlayImg.src = src;
        
        const methodIndicator = document.getElementById('methodIndicator');
        methodIndicator.textContent = table.filename.replace(/\.[^/.]+$/, '');
      } else if (isComparisonMode) {
        // In comparison mode, show vysec.jpg
        const vysecImage = currentStudy.overview.find(img => img.includes('vysec'));
        if (vysecImage) {
          overlayImg.src = `data/${currentStudy.name}/${vysecImage}`;
          
          const methodIndicator = document.getElementById('methodIndicator');
          const method = currentStudy.methods[currentMethodIndex];
          methodIndicator.textContent = `${method.name} - Porovnání s výřezem`;
        }
      } else {
        const method = currentStudy.methods[currentMethodIndex];
        const image = method.images[currentImageIndex];
        overlayImg.src = image.fullPath;
        
        const methodIndicator = document.getElementById('methodIndicator');
        let spectralType = '';
        if (image.filename.includes('_rgb')) {
          spectralType = ' (RGB)';
        } else if (image.filename.includes('_tgi')) {
          spectralType = ' (TGI)';
        }
        methodIndicator.textContent = `${method.name}${spectralType}`;
      }
      
      // Track current overlay image for cleanup
      currentOverlayImages = [overlayImg.src];
    }

    function navigateImage(direction) {
      if (isOverviewMode) {
        currentImageIndex = (currentImageIndex + direction + currentStudy.overview.length) % currentStudy.overview.length;
      } else if (isTableMode) {
        currentImageIndex = (currentImageIndex + direction + currentStudy.tables.length) % currentStudy.tables.length;
      } else {
        const method = currentStudy.methods[currentMethodIndex];
        currentImageIndex = (currentImageIndex + direction + method.images.length) % method.images.length;
      }
      updateImageOverlay();
    }

    function navigateMethod(direction) {
      currentMethodIndex = (currentMethodIndex + direction + currentStudy.methods.length) % currentStudy.methods.length;
      currentImageIndex = 0;
      updateImageOverlay();
    }

    function navigateSpectralIndex(direction) {
      const method = currentStudy.methods[currentMethodIndex];
      const currentImage = method.images[currentImageIndex];
      
      // Find the other spectral index image
      const otherImage = method.images.find(img => {
        if (direction === -1) {
          // Going to previous spectral index
          if (currentImage.filename.includes('_rgb')) {
            return img.filename.includes('_tgi');
          } else if (currentImage.filename.includes('_tgi')) {
            return img.filename.includes('_rgb');
          }
        } else {
          // Going to next spectral index
          if (currentImage.filename.includes('_rgb')) {
            return img.filename.includes('_tgi');
          } else if (currentImage.filename.includes('_tgi')) {
            return img.filename.includes('_rgb');
          }
        }
        return false;
      });
      
      if (otherImage) {
        currentImageIndex = method.images.indexOf(otherImage);
        updateImageOverlay();
      }
    }

    function showTablesOverlay(studyName) {
      currentStudy = data.find(st => st.name === studyName);
      currentTableIndex = 0;
      
      console.log('Current study:', currentStudy.name);
      console.log('All tables in study:', currentStudy.tables.map(t => t.filename));
      
      // Načti tabulky do overlay
      const tablesContainer = document.querySelector('#tablesOverlay .tables-container');
      tablesContainer.innerHTML = '';
      
      // Seskupit tabulky a grafy podle základního názvu
      const groupedData = {};
      currentStudy.tables.forEach(table => {
        const filename = table.filename;
        let baseName = '';
        let type = '';
        
        console.log('Processing filename:', filename);
        
        if (filename.includes('_tabulka')) {
          baseName = filename.replace('_tabulka.webp', '');
          type = 'table';
          console.log('Found table:', baseName);
        } else if (filename.includes('_graf')) {
          // Najít základní název pro graf (může být _graf, _graf1, _graf2, atd.)
          baseName = filename.replace(/_graf\d*\.webp$/, '');
          type = 'graph';
          console.log('Found graph:', baseName);
        }
        
        if (baseName) {
          if (!groupedData[baseName]) {
            groupedData[baseName] = { tables: [], graphs: [] };
          }
          if (type === 'table') {
            groupedData[baseName].tables.push(table);
          } else if (type === 'graph') {
            groupedData[baseName].graphs.push(table);
          }
        }
      });
      
      console.log('Grouped data:', groupedData);
      
      // Vytvořit elementy pro každou skupinu
      Object.keys(groupedData).forEach(baseName => {
        const group = groupedData[baseName];
        const tableItem = document.createElement('div');
        tableItem.className = 'table-item';
        
        // Zobrazit první tabulku, pokud existuje
        const displayTable = group.tables.length > 0 ? group.tables[0] : group.graphs[0];
        const hasGraphs = group.graphs.length > 0;
        const hasTables = group.tables.length > 0;
        const canToggle = hasGraphs && hasTables;
        
        tableItem.innerHTML = `
          <img src="/${displayTable.fullPath}" alt="${displayTable.filename}" 
               ${canToggle ? 'onclick="toggleTableGraph(this, \'' + baseName + '\', \'' + studyName + '\')" style="cursor: pointer;"' : ''} />
          ${canToggle ? '<div style="text-align: center; margin-top: 0.5rem; font-size: 0.9rem; color: #666;">Klikněte pro přepnutí na graf</div>' : ''}
        `;
        
        // Uložit data pro přepínání
        tableItem.dataset.baseName = baseName;
        tableItem.dataset.studyName = studyName;
        tableItem.dataset.currentIndex = 0;
        tableItem.dataset.isTable = 'true';
        tableItem.dataset.tables = JSON.stringify(group.tables.map(t => t.fullPath));
        tableItem.dataset.graphs = JSON.stringify(group.graphs.map(g => g.fullPath));
        
        tablesContainer.appendChild(tableItem);
      });
      
      // Aktualizuj indikátor s názvem studie
      document.getElementById('tablesIndicator').textContent = `${studyName} - Grafy a metriky`;
      
      document.getElementById('tablesOverlay').style.display = 'block';
      
      // Skrýt bubliny na mobilu
      if (window.innerWidth <= 768) {
        hideBubbles();
      }
    }

    function toggleTableGraph(imgElement, baseName, studyName) {
      const tableItem = imgElement.closest('.table-item');
      const isTable = tableItem.dataset.isTable === 'true';
      const currentIndex = parseInt(tableItem.dataset.currentIndex) || 0;
      const tables = JSON.parse(tableItem.dataset.tables || '[]');
      const graphs = JSON.parse(tableItem.dataset.graphs || '[]');
      
      // Vytvořit seznam všech souborů v pořadí: tabulky, pak grafy
      const allFiles = [...tables, ...graphs];
      
      if (allFiles.length > 1) {
        // Přepnout na další soubor v cyklu
        const nextIndex = (currentIndex + 1) % allFiles.length;
        imgElement.src = '/' + allFiles[nextIndex];
        tableItem.dataset.currentIndex = nextIndex;
        
        // Určit typ aktuálního souboru pro zobrazení správné instrukce
        const currentFile = allFiles[nextIndex];
        const isCurrentTable = tables.includes(currentFile);
        tableItem.dataset.isTable = isCurrentTable.toString();
        
        // Aktualizovat instrukci
        const instructionDiv = tableItem.querySelector('div');
        if (instructionDiv) {
          if (isCurrentTable) {
            instructionDiv.textContent = 'Klikněte pro přepnutí na graf';
          } else {
            instructionDiv.textContent = 'Klikněte pro přepnutí na tabulku';
          }
        }
      }
    }

    function hideTablesOverlay() {
      document.getElementById('tablesOverlay').style.display = 'none';
      cleanupMemory();
      
      // Zobrazit bubliny na mobilu
      if (window.innerWidth <= 768) {
        showBubbles();
      }
    }

    function navigateTable(direction) {
      if (currentStudy && currentStudy.tables) {
        currentTableIndex = (currentTableIndex + direction + currentStudy.tables.length) % currentStudy.tables.length;
        showTableOverlay(currentStudy.name, 'table', currentTableIndex);
      }
    }
    
    // Highlight active study based on URL
    document.addEventListener('DOMContentLoaded', function() {
      const path = window.location.pathname;
      const studyLinks = document.querySelectorAll('.study-nav a');
      
      studyLinks.forEach(link => {
        link.classList.remove('active');
        if (link.getAttribute('href') === path) {
          link.classList.add('active');
        }
      });
      
      // Inicializace mobilních bublin až po načtení DOM
      setupMobileBubbleToggle('.help-bubble', '.help-content');
      setupMobileBubbleToggle('.info-bubble', '.info-content');
    });
    
    // Memory cleanup on page unload
    window.addEventListener('beforeunload', function() {
      imageCache.clear();
      currentOverlayImages = [];
    });
    
    // Periodic memory cleanup
    setInterval(cleanupMemory, 30000); // Every 30 seconds

    // Mobilní toggle pro bubliny (help/info) - zjednodušená varianta
    function setupMobileBubbleToggle(bubbleClass, contentClass) {
      console.log('Setting up mobile bubble toggle for:', bubbleClass, contentClass);
      
      document.querySelectorAll(bubbleClass).forEach(bubble => {
        const content = bubble.querySelector(contentClass);
        const icon = bubble.querySelector('.bubble-icon');
        
        console.log('Found bubble:', bubble, 'content:', content, 'icon:', icon);
        
        // Na mobilu: kliknutí na ikonu zobrazí obsah
        if (icon) {
          // Odstranit existující event listenery
          icon.removeEventListener('click', icon.mobileClickHandler);
          
          // Vytvořit nový handler
          icon.mobileClickHandler = function(e) {
            console.log('Icon clicked on mobile!');
            if (window.innerWidth <= 768) {
              e.stopPropagation();
              console.log('Icon clicked, showing content');
              console.log('Content element:', content);
              console.log('Current display:', content.style.display);
              console.log('Computed display:', window.getComputedStyle(content).display);
              
              // Jednoduchý přístup - přepnout display
              if (content.style.display === 'block') {
                content.style.setProperty('display', 'none', 'important');
                content.style.setProperty('opacity', '0', 'important');
                content.style.setProperty('visibility', 'hidden', 'important');
                console.log('Hiding content');
              } else {
                // Skrýt všechny ostatní bubliny
                document.querySelectorAll('.bubble-content').forEach(c => {
                  c.style.setProperty('display', 'none', 'important');
                  c.style.setProperty('opacity', '0', 'important');
                  c.style.setProperty('visibility', 'hidden', 'important');
                });
                // Zobrazit aktuální bublinu
                content.style.setProperty('display', 'block', 'important');
                content.style.setProperty('opacity', '1', 'important');
                content.style.setProperty('visibility', 'visible', 'important');
                content.style.setProperty('transform', 'translateY(0)', 'important');
                console.log('Showing content, new display:', content.style.display);
              }
            }
          };
          
          icon.addEventListener('click', icon.mobileClickHandler);
        }
        
        // Zabránit zavření při kliknutí na obsah
        content.addEventListener('click', function(e) {
          if (window.innerWidth <= 768) {
            e.stopPropagation();
          }
        });
      });
      
      // Kliknutí mimo zavře všechny bubliny
      document.removeEventListener('click', document.mobileBubbleCloseHandler);
      document.mobileBubbleCloseHandler = function(e) {
        if (window.innerWidth <= 768) {
          console.log('Click outside, closing bubbles');
          document.querySelectorAll('.bubble-content').forEach(content => {
            content.style.setProperty('display', 'none', 'important');
            content.style.setProperty('opacity', '0', 'important');
            content.style.setProperty('visibility', 'hidden', 'important');
          });
        }
      };
      document.addEventListener('click', document.mobileBubbleCloseHandler);
    }

    // Funkce pro skrývání bublin při overlay
    function hideBubbles() {
      document.querySelectorAll('.bubble').forEach(bubble => {
        bubble.style.display = 'none';
      });
    }
    
    function showBubbles() {
      document.querySelectorAll('.bubble').forEach(bubble => {
        bubble.style.display = 'flex';
      });
    }
  </script>
  
  <footer style="
    text-align: center;
    padding: 2rem;
    margin-top: 3rem;
    background: rgba(255,255,255,0.1);
    backdrop-filter: blur(10px);
    border-top: 1px solid rgba(255,255,255,0.2);
    color: white;
    font-size: 1rem;
    font-weight: 500;
  ">
    <p style="margin: 0; text-shadow: 0 1px 2px rgba(0,0,0,0.3);">
      Bc. Jakub Ešpandr, FlyCamCzech.eu 2025
    </p>
  </footer>
</body>
</html>